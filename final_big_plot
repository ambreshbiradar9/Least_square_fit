import numpy as np
import pandas as pd
from scipy import optimize
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import scipy.linalg

df=pd.read_csv(r'C:\Users\ABIREDA\Desktop\Study\points.csv')
x=df['X'].to_numpy()
y=df['Y'].to_numpy()
z=df['Z'].to_numpy()

x1=x[:10]
y1=y[:10]
z1=z[:10]
data = np.c_[x1,y1,z1]

mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X,Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))


# Import dependencies
import plotly
import plotly.graph_objs as go

# Configure Plotly to be rendered inline in the notebook.
plotly.offline.init_notebook_mode()

# Configure the trace.
trace = go.Scatter3d(
    x=x,  # <-- Put your data instead
    y=y,  # <-- Put your data instead
    z=z,  # <-- Put your data instead
    mode='markers',
    marker={
        'size': 10,
        'opacity': 0.8,
    }
)

data = [trace]
fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y,surfacecolor=x**2 + y**2 + z**2)])
fig.add_trace(go.Scatter3d(
    x=x,  # <-- Put your data instead
    y=y,  # <-- Put your data instead
    z=z,  # <-- Put your data instead
    mode='markers',
    marker={
        'size': 10,
        'opacity': 0.8,
    }
))



#fig.show()
# Render the plot.
plotly.offline.iplot(fig)







plt.figure()
ax = plt.subplot(111, projection='3d')
ax.scatter(x1, y1, z1, color='b')



# do fit
tmp_A = []
tmp_b = []
for i in range(len(x1)):
    tmp_A.append([x1[i], y1[i], 1])
    tmp_b.append(z1[i])
b = np.matrix(tmp_b).T
A = np.matrix(tmp_A)
fit = (A.T * A).I * A.T * b
errors = b - A * fit
residual = np.linalg.norm(errors)

print("solution:")
print ("%f x + %f y + %f = z" % (fit[0], fit[1], fit[2]))
print ("errors:")
print (errors)
print ("residual:")
print (residual)

# plot plane
xlim = ax.get_xlim()
ylim = ax.get_ylim()
X,Y = np.meshgrid(np.arange(xlim[0], xlim[1]),
                  np.arange(ylim[0], ylim[1]))
Z = np.zeros(X.shape)
for r in range(X.shape[0]):
    for c in range(X.shape[1]):
        Z[r,c] = fit[0] * X[r,c] + fit[1] * Y[r,c] + fit[2]
ax.plot_wireframe(X,Y,Z, color='k')

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()
